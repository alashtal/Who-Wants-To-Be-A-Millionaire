{"name":"Who-wants-to-be-a-millionaire","tagline":"Quiz show project for ICS4U. Implemented in java using swing.","body":"# Who Wants to be A Millionaire \r\n_Ryan, Tony ,Ronald_\r\n**Background**\r\nWho Wants to be A Millionaire has been one of the most popular game shows that people know of, and has been copied to develop other variations of it. Basically, you answer questions  and get points based on if you get it correct or not. This millionaire game also requires the player to answer question advance to further cash levels. At the end of both games the player leaves the game with an amount of money.\r\n\r\n**How to run the program**\r\nOur improvised Jeopardy game can be run on Dr java or eclipse. Both are available on the internet for no cost.  You must run the JeopardyGUI file for it to work. Ignore the other .java files inside, as they are needed to run the game. Once compiled and running, the program will go to the start screen. You can view brief instructions or begin the game immediately, by pressing the start button on the window. You will then be asked to answer a several questions to beat the game. If you are stuck, there are three lifelines available to aid you. One of them calls an AI to help you guess (phone a friend), another asks the audience for an answer(ask the audience), lastly the 50/50 lifeline tells you two of the three incorrect answers randomly(50/50).When you are finished the game you will leave with x amount of game moneys  to show how good your understanding of GUI is. \r\n\r\n**Limitations + bugs of the program**\r\nThe main limitation of this program is that once a lifeline is clicked you will use it right away. Also if you forget what the lifeline asked, it will not keep record of it for you. The program will also give you random questions - so difficult ones may come early in the program. Also, if you adjust the window for the program some of the GUI components will become messed up.\r\n\r\n## Developer's Guide \r\n**Overview**\r\nIn our program we have a few important classes. There is the _Question_, _QuestionLoader_,  _QuestionDeck_, and the _QuestionWindowPanel_. These question classes are used to construct the questions for the game. These are the main parts for the implementation of the questions into our program. There is also the _JeapordyGUI, _StartMenuGraphics_  and the _EndScreenGUI_. These  classes make some of  the GUI components for our quiz game. We also have a progress bar class which makes the progress bar for the levels. There is a lifeline GUI and algorithm that will be discussed in detail later. The program also uses a player class, and a level class to help track the user's progress. We also have a _CorrectlyClicked_, _CustomDialog_  and _RadioListener_  class for the some of the actionListeners used.\r\n\t\r\n**QuestionDeck**\r\nThis is the core of the questions component because it adds all the questions into the program. Its tries to find corresponding questions that fit the criterion needed (Ex: point values, category), which it then loads into the program. This class functions as a deck of questions- hence the name.\r\n\r\n**Question**\r\nWhat this class does is it constructs the question itself. It assigns the correct answer and the money value to a method so it can be accessed later . It also sets the point values, and it checks to see if the user has locked in the choice for the chosen answer( using a Boolean- true for locked and false for not ). This file also has the category of the question, levels, and money value stored.  It also shuffles the answers randomly to give different question choice orders each time.\r\n\r\n**QuestionLoader**\r\nThis class loads the questions into a readable format character by character. It also tracks the file for the questions to see if it has reached the end of the text file. At first, the question being constructed and its parameters are defined as null, then the question is built. Each question object has a points, category, question, and an answer.\r\n\r\n**QuestionWindowPanel**\r\nThe QuestionWindowPanel class constructs allows the radio buttons to be constructed for use. It also contains the actionlisteners used to make the components have a function. This class also tells the user (by use of the actionlistener) whether they have selected the correct answer or not. It also tells the user how much money they left with, if they do so. It also checks to see if the window screen size has been changed or not so the components will not get disorganised.\r\n\r\n**CorrectlyClicked**\r\nThis may SEEM insignificant, but if you remove it everything breaks( A very crucial part of the program).\r\n\r\n**CustomDialogue** \r\nUsed to construct a yes or no dialogue box.\r\n\r\n**EndScreenGUI**\r\nThis class is used for making the graphics for the end screen GUI. It shows the user a click to continue Jbutton, which then (using a Jdialogue box ) tells the user thanks for playing. It uses the actionlistener to determine if the user is ready to advance or not.\r\n\r\n**JeapordyGUI**\r\nThis class runs the program . It contains two buttons - one for instructions and one to start the quiz game. It then lead to the other classes used for the quiz game. It also implements the actionlistener to determine which buttons the user has selected.\r\n\r\n**Level**\r\nWhat this class does is it constructs the different levels of money you can get to. It also handles if you can advance to the next level or not, and has method to do so.\r\n\r\n**LifelnGui**\r\nThis class contains the algorithms required for a basic lifeline implementation for our GUI. It contains a 50/50, phone a friend, and ask the audience lifelines for the user to select. The 50/50  lifeline eliminates two of the three incorrect choices given to the user. Phone a friend generates a message that contains an answer your friend selected to help you determine an answer. Your 'friend' has three confidence levels- and decides their answer based on it(\"I'm positive\" gives the correct answer, \"I'm pretty sure\", gives 2 answers( one correct and incorrect) possible answers, and \" I don't know\" gives  3 possibilities (one correct and two incorrect)) . The ask the audience lifeline always gives the user the correct answer - but with a 75% chance of being correct based on the audience votes. This class also sets up the panel used for the buttons placed and creates them. It also contains actionlisteners  that allow the lifelines to be used and make them unusable once clicked. \r\n**Player**\r\nThis nifty class enables the user to have a name and give them a starting level(level 1).\r\nProgressBar\r\nThe ProgressBar class is a progress bar . It is the bar used to tell where the player is at for their monetary position in the game. This bar is vertical to simulate the well known \"Who Wants to be a Millionaire?\" game bar.\r\n\r\n**RadioListener**\r\nThe main function of this class is to make the radio buttons to be used. It also contains  an actionlistener to tell if the radio button has been clicked or not. It also enables you to ALT click for a button to work instead of clicking it with the mouse. \r\n\r\n**StartMenuGraphics**\r\nThis is just the main background use for the program, made into a class to save some code. Just blue with the width and height of 1000 by 1000.\r\n\r\n## Suggestions for Improvement\r\nOne of the main improvements for the program would be to make it have a nicer start menu, and GUI components. The overall program needs to have a better end screen display  to show the user their point total at the end of the game. It could also make the question difficulty increase with the levels, to make the game less random. The question classes could be also grouped together, since they relate to one another. The lifeline class could also be more interactive, by having charts, visuals, or more GUI components added add to it. The start screen could have a more noticeable title, to add to the overall look of it. The quiz game could also be resized, so it won't look as empty.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}